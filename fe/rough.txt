import React, { useState, useEffect, useRef, useReducer } from 'react';
import { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';

// 1. Functional Component vs Class Component
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

// 2. State in Functional Components
function Counter() {
  const [count, setCount] = useState(0);

  const increment = () => setCount(count + 1);

  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

// 3. React Hooks (useState, useEffect, useRef, useReducer)
function Timer() {
  const [seconds, setSeconds] = useState(0);
  const intervalRef = useRef();

  useEffect(() => {
    intervalRef.current = setInterval(() => {
      setSeconds(prev => prev + 1);
    }, 1000);

    return () => clearInterval(intervalRef.current); // cleanup
  }, []);

  return <h2>Time Elapsed: {seconds} seconds</h2>;
}

// useReducer example for managing complex state
const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function CounterWithReducer() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <h2>Count (with useReducer): {state.count}</h2>
      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>
    </div>
  );
}

// 4. Conditional Rendering
function UserGreeting({ isLoggedIn }) {
  return (
    <div>
      {isLoggedIn ? <h2>Welcome Back!</h2> : <h2>Please Sign In</h2>}
    </div>
  );
}

// 5. Rendering Lists & Keys
function ItemList() {
  const items = ['Item 1', 'Item 2', 'Item 3'];
  return (
    <ul>
      {items.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>
  );
}

// 6. Forms in React (Controlled Components)
function Form() {
  const [inputValue, setInputValue] = useState('');

  const handleChange = (event) => {
    setInputValue(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    alert(`Form Submitted with input: ${inputValue}`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" value={inputValue} onChange={handleChange} />
      <button type="submit">Submit</button>
    </form>
  );
}

// 7. Lifting State Up (Prop Drilling Example)
function ChildComponent({ count }) {
  return <p>Child Count: {count}</p>;
}

function ParentComponent() {
  const [count, setCount] = useState(0);
  return (
    <div>
      <h2>Parent Count: {count}</h2>
      <button onClick={() => setCount(count + 1)}>Increase Parent Count</button>
      <ChildComponent count={count} />
    </div>
  );
}

// 8. Routing with React Router
function Home() {
  return <h2>Home Page</h2>;
}

function About() {
  return <h2>About Page</h2>;
}

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  return (
    <div className="App">
      <h1>React Concepts Example</h1>

      {/* Functional vs Class Component */}
      <Welcome name="User" />

      {/* State in Functional Component */}
      <Counter />

      {/* Hooks: useState, useEffect, useRef, useReducer */}
      <Timer />
      <CounterWithReducer />

      {/* Conditional Rendering */}
      <UserGreeting isLoggedIn={isLoggedIn} />
      <button onClick={() => setIsLoggedIn(!isLoggedIn)}>
        {isLoggedIn ? 'Logout' : 'Login'}
      </button>

      {/* Rendering Lists */}
      <ItemList />

      {/* Controlled Form Example */}
      <Form />

      {/* Lifting State Up */}
      <ParentComponent />

      {/* Routing with React Router */}
      <Router>
        <nav>
          <Link to="/">Home</Link>
          <Link to="/about">About</Link>
        </nav>

        <Switch>
          <Route exact path="/" component={Home} />
          <Route path="/about" component={About} />
        </Switch>
      </Router>
    </div>
  );
}



export default App;
